window.esdocSearchIndex = [
  [
    "",
    "test-file/test/scripts/phyx2owl.js.html#lineNumber19",
    "",
    "test"
  ],
  [
    "",
    "test-file/test/scripts/phyx2owl.js.html#lineNumber38",
    " should be able to convert `brochu_2003.json`",
    "test"
  ],
  [
    "",
    "test-file/test/scripts/phyx2owl.js.html#lineNumber69",
    " should be able to convert the entire `test/examples/correct` directory",
    "test"
  ],
  [
    "",
    "test-file/test/scripts/phyx2owl.js.html#lineNumber103",
    " should give an error if no JSON files could be found",
    "test"
  ],
  [
    "",
    "test-file/test/scripts/phyx2owl.js.html#lineNumber29",
    " should support `--help`",
    "test"
  ],
  [
    "",
    "test-file/test/scripts/phyx2owl.js.html#lineNumber20",
    " should work without any arguments",
    "test"
  ],
  [
    "@phyloref/phyx/src/wrappers/citationwrapper.js~citationwrapper",
    "class/src/wrappers/CitationWrapper.js~CitationWrapper.html",
    "<span>CitationWrapper</span> <span class=\"search-result-import-path\">@phyloref/phyx/src/wrappers/CitationWrapper.js</span>",
    "class"
  ],
  [
    "@phyloref/phyx/src/wrappers/phylogenywrapper.js~phylogenywrapper",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html",
    "<span>PhylogenyWrapper</span> <span class=\"search-result-import-path\">@phyloref/phyx/src/wrappers/PhylogenyWrapper.js</span>",
    "class"
  ],
  [
    "@phyloref/phyx/src/wrappers/phylorefwrapper.js~phylorefwrapper",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html",
    "<span>PhylorefWrapper</span> <span class=\"search-result-import-path\">@phyloref/phyx/src/wrappers/PhylorefWrapper.js</span>",
    "class"
  ],
  [
    "@phyloref/phyx/src/wrappers/phyxwrapper.js~phyxwrapper",
    "class/src/wrappers/PhyxWrapper.js~PhyxWrapper.html",
    "<span>PhyxWrapper</span> <span class=\"search-result-import-path\">@phyloref/phyx/src/wrappers/PhyxWrapper.js</span>",
    "class"
  ],
  [
    "@phyloref/phyx/src/wrappers/specimenwrapper.js~specimenwrapper",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html",
    "<span>SpecimenWrapper</span> <span class=\"search-result-import-path\">@phyloref/phyx/src/wrappers/SpecimenWrapper.js</span>",
    "class"
  ],
  [
    "@phyloref/phyx/src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html",
    "<span>TaxonConceptWrapper</span> <span class=\"search-result-import-path\">@phyloref/phyx/src/wrappers/TaxonConceptWrapper.js</span>",
    "class"
  ],
  [
    "@phyloref/phyx/src/wrappers/taxonnamewrapper.js~taxonnamewrapper",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html",
    "<span>TaxonNameWrapper</span> <span class=\"search-result-import-path\">@phyloref/phyx/src/wrappers/TaxonNameWrapper.js</span>",
    "class"
  ],
  [
    "@phyloref/phyx/src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html",
    "<span>TaxonomicUnitMatcher</span> <span class=\"search-result-import-path\">@phyloref/phyx/src/matchers/TaxonomicUnitMatcher.js</span>",
    "class"
  ],
  [
    "@phyloref/phyx/src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html",
    "<span>TaxonomicUnitWrapper</span> <span class=\"search-result-import-path\">@phyloref/phyx/src/wrappers/TaxonomicUnitWrapper.js</span>",
    "class"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber16",
    "CitationWrapper",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber79",
    "CitationWrapper ",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber82",
    "CitationWrapper  #constructor",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber83",
    "CitationWrapper  #constructor should return a CitationWrapper",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber88",
    "CitationWrapper  #toString",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber89",
    "CitationWrapper  #toString should return the expected string",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber57",
    "CitationWrapper given an empty citation",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber60",
    "CitationWrapper given an empty citation #constructor",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber61",
    "CitationWrapper given an empty citation #constructor should return a CitationWrapper",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber66",
    "CitationWrapper given an empty citation #toString",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber71",
    "CitationWrapper given an empty citation #toString should be settable by changing the title",
    "test"
  ],
  [
    "",
    "test-file/test/citations.js.html#lineNumber67",
    "CitationWrapper given an empty citation #toString should return undefined",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber24",
    "PhylogenyWrapper",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber249",
    "PhylogenyWrapper #asJSONLD",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber258",
    "PhylogenyWrapper #asJSONLD should generate a new @id on input phylorefs",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber265",
    "PhylogenyWrapper #asJSONLD should generate the phylogeny in JSON-LD as expected",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber250",
    "PhylogenyWrapper #asJSONLD should preserve an existing @id on input phylogenies",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber25",
    "PhylogenyWrapper #constructor",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber26",
    "PhylogenyWrapper #constructor when used to wrap an empty object",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber27",
    "PhylogenyWrapper #constructor when used to wrap an empty object should return a PhylogenyWrapper object",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber34",
    "PhylogenyWrapper #getErrorsInNewickString",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber35",
    "PhylogenyWrapper #getErrorsInNewickString when given a correct Newick string",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber40",
    "PhylogenyWrapper #getErrorsInNewickString when given a correct Newick string should return an empty list of errors",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber47",
    "PhylogenyWrapper #getErrorsInNewickString when given an empty Newick string",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber53",
    "PhylogenyWrapper #getErrorsInNewickString when given an empty Newick string should return a single \"No phylogeny entered\" error",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber96",
    "PhylogenyWrapper #getErrorsInNewickString when given an incomplete Newick string",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber102",
    "PhylogenyWrapper #getErrorsInNewickString when given an incomplete Newick string should report an error parsing the phylogeny",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber62",
    "PhylogenyWrapper #getErrorsInNewickString when given an unbalanced Newick string",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber78",
    "PhylogenyWrapper #getErrorsInNewickString when given an unbalanced Newick string should report how many parentheses are missing",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber114",
    "PhylogenyWrapper #getNodeLabels",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber130",
    "PhylogenyWrapper #getNodeLabels For a particular Newick phylogeny",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber131",
    "PhylogenyWrapper #getNodeLabels For a particular Newick phylogeny should return a list of all node labels by default",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber136",
    "PhylogenyWrapper #getNodeLabels For a particular Newick phylogeny should return a list of internal labels when asked for internal labels",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber141",
    "PhylogenyWrapper #getNodeLabels For a particular Newick phylogeny should return a list of terminal labels when asked for terminal labels",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber433",
    "PhylogenyWrapper #getParsedNewickWithIRIs",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber468",
    "PhylogenyWrapper #getParsedNewickWithIRIs should be able to parse a provided Newick string as expected",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber149",
    "PhylogenyWrapper given a particular phylogeny with additional node properties",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber174",
    "PhylogenyWrapper given a particular phylogeny with additional node properties #getNodeLabels",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber175",
    "PhylogenyWrapper given a particular phylogeny with additional node properties #getNodeLabels should return the list of node labels from the Newick string",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber217",
    "PhylogenyWrapper given a particular phylogeny with additional node properties #getNodeLabelsMatchedBySpecifier",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber227",
    "PhylogenyWrapper given a particular phylogeny with additional node properties #getNodeLabelsMatchedBySpecifier should match a specifier to MVZ191016 based on occurrence ID",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber218",
    "PhylogenyWrapper given a particular phylogeny with additional node properties #getNodeLabelsMatchedBySpecifier should match a specifier to MVZ225749 based on occurrence ID",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber237",
    "PhylogenyWrapper given a particular phylogeny with additional node properties #getNodeLabelsMatchedBySpecifier should match a specifier to node \"Rana boylii\" based on the parsed scientific name",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber185",
    "PhylogenyWrapper given a particular phylogeny with additional node properties #getTaxonomicUnitsForNodeLabel",
    "test"
  ],
  [
    "",
    "test-file/test/phylogenies.js.html#lineNumber186",
    "PhylogenyWrapper given a particular phylogeny with additional node properties #getTaxonomicUnitsForNodeLabel should return the list of taxonomic units using information from additional node properties",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber26",
    "PhylorefWrapper",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber251",
    "PhylorefWrapper #asJSONLD",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber261",
    "PhylorefWrapper #asJSONLD should generate a new @id on input phylorefs",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber269",
    "PhylorefWrapper #asJSONLD should generate the expected equivClass expression for 1 int, 1 ext phyloref",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber300",
    "PhylorefWrapper #asJSONLD should generate the expected equivClass expression for 2 int phyloref",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber252",
    "PhylorefWrapper #asJSONLD should preserve an existing @id on input phylorefs",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber179",
    "PhylorefWrapper given a particular phylogeny",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber190",
    "PhylorefWrapper given a particular phylogeny #getExpectedNodeLabels",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber191",
    "PhylorefWrapper given a particular phylogeny #getExpectedNodeLabels should be able to determine expected node labels for a phylogeny",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber53",
    "PhylorefWrapper given an empty phyloreference",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber204",
    "PhylorefWrapper given an empty phyloreference",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber56",
    "PhylorefWrapper given an empty phyloreference #constructor",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber57",
    "PhylorefWrapper given an empty phyloreference #constructor should return a PhylorefWrapper",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber207",
    "PhylorefWrapper given an empty phyloreference #getCurrentStatus",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber208",
    "PhylorefWrapper given an empty phyloreference #getCurrentStatus should return \"pso:draft\" as the default initial status",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber170",
    "PhylorefWrapper given an empty phyloreference #getSpecifierLabel as TaxonomicUnitWrapper",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber171",
    "PhylorefWrapper given an empty phyloreference #getSpecifierLabel as TaxonomicUnitWrapper should return the correct label for each specifier",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber162",
    "PhylorefWrapper given an empty phyloreference #getSpecifierType",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber163",
    "PhylorefWrapper given an empty phyloreference #getSpecifierType should return the correct specifier type for each specifier",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber225",
    "PhylorefWrapper given an empty phyloreference #getStatusChanges",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber226",
    "PhylorefWrapper given an empty phyloreference #getStatusChanges should return the empty list",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber230",
    "PhylorefWrapper given an empty phyloreference #getStatusChanges when modified by using .setStatus",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber231",
    "PhylorefWrapper given an empty phyloreference #getStatusChanges when modified by using .setStatus should return the updated list",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber62",
    "PhylorefWrapper given an empty phyloreference #label",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber67",
    "PhylorefWrapper given an empty phyloreference #label should be settable by assigning to .label",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber63",
    "PhylorefWrapper given an empty phyloreference #label should return undefined",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber214",
    "PhylorefWrapper given an empty phyloreference #setStatus",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber215",
    "PhylorefWrapper given an empty phyloreference #setStatus should throw an error if given a mistyped status",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber73",
    "PhylorefWrapper given an empty phyloreference #specifiers",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber78",
    "PhylorefWrapper given an empty phyloreference #specifiers should initially return a nomenclatural code of unknown",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber74",
    "PhylorefWrapper given an empty phyloreference #specifiers should initially return an empty list",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber82",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new external specifier is added using .externalSpecifiers",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber93",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new external specifier is added using .externalSpecifiers",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber83",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new external specifier is added using .externalSpecifiers should return a list with the new specifier",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber94",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new external specifier is added using .externalSpecifiers should return a list with the new specifier",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber88",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new external specifier is added using .externalSpecifiers should return a nomenclatural code of ICZN",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber99",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new external specifier is added using .externalSpecifiers should return two nomenclatural codes, one for each specifier",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber105",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new external specifier is added using .externalSpecifiers should still return a nomenclatural code of ICZN",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber110",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new internal specifier is added using .internalSpecifiers",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber123",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new internal specifier is added using .internalSpecifiers should change to a default nomenclatural code of owlterms.UNKNOWN_CODE",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber111",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new internal specifier is added using .internalSpecifiers should return a list with the new specifier",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber116",
    "PhylorefWrapper given an empty phyloreference #specifiers when a new internal specifier is added using .internalSpecifiers should return three nomenclatural codes, one for each specifier",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber140",
    "PhylorefWrapper given an empty phyloreference #specifiers when a specifier is added using .externalSpecifiers",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber141",
    "PhylorefWrapper given an empty phyloreference #specifiers when a specifier is added using .externalSpecifiers should return the updated list",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber154",
    "PhylorefWrapper given an empty phyloreference #specifiers when a specifier is added using .internalSpecifiers",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber155",
    "PhylorefWrapper given an empty phyloreference #specifiers when a specifier is added using .internalSpecifiers should be included in the list of all specifiers",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber147",
    "PhylorefWrapper given an empty phyloreference #specifiers when a specifier is changed to an internal specifier using .setSpecifierType",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber148",
    "PhylorefWrapper given an empty phyloreference #specifiers when a specifier is changed to an internal specifier using .setSpecifierType should remain in the list of specifiers",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber128",
    "PhylorefWrapper given an empty phyloreference #specifiers when specifiers are deleted using .deleteSpecifier",
    "test"
  ],
  [
    "",
    "test-file/test/phylorefs.js.html#lineNumber129",
    "PhylorefWrapper given an empty phyloreference #specifiers when specifiers are deleted using .deleteSpecifier should return the updated list",
    "test"
  ],
  [
    "",
    "test-file/test/specimens.js.html#lineNumber16",
    "SpecimenWrapper",
    "test"
  ],
  [
    "",
    "test-file/test/specimens.js.html#lineNumber17",
    "SpecimenWrapper #constructor",
    "test"
  ],
  [
    "",
    "test-file/test/specimens.js.html#lineNumber77",
    "SpecimenWrapper #constructor should be able to create a specimen JSON record from an occurrence ID",
    "test"
  ],
  [
    "",
    "test-file/test/specimens.js.html#lineNumber24",
    "SpecimenWrapper #constructor should be able to extract an occurenceID and catalogNumber from simple specimen IDs",
    "test"
  ],
  [
    "",
    "test-file/test/specimens.js.html#lineNumber53",
    "SpecimenWrapper #constructor should be able to extract the same occurrenceID from different representations",
    "test"
  ],
  [
    "",
    "test-file/test/specimens.js.html#lineNumber18",
    "SpecimenWrapper #constructor should be able to wrap an empty specimen",
    "test"
  ],
  [
    "",
    "test-file/test/specimens.js.html#lineNumber33",
    "SpecimenWrapper #constructor should extract institutionCode and catalogNumber from a institutionCode:catalogNumber combination",
    "test"
  ],
  [
    "",
    "test-file/test/specimens.js.html#lineNumber43",
    "SpecimenWrapper #constructor should extract occurenceID, institutionCode and catalogNumber from Darwin Core triples",
    "test"
  ],
  [
    "",
    "test-file/test/specimens.js.html#lineNumber68",
    "SpecimenWrapper #constructor should not attempt to split a URL into occurenceID, institutionCode and catalogNumber",
    "test"
  ],
  [
    "",
    "test-file/test/specimens.js.html#lineNumber59",
    "SpecimenWrapper #constructor should not attempt to split a URN into occurenceID, institutionCode and catalogNumber",
    "test"
  ],
  [
    "",
    "test-file/test/taxon-names.js.html#lineNumber15",
    "TaxonNameWrapper",
    "test"
  ],
  [
    "",
    "test-file/test/taxon-names.js.html#lineNumber16",
    "TaxonNameWrapper #constructor",
    "test"
  ],
  [
    "",
    "test-file/test/taxon-names.js.html#lineNumber17",
    "TaxonNameWrapper #constructor should accept empty taxon names without errors",
    "test"
  ],
  [
    "",
    "test-file/test/taxon-names.js.html#lineNumber32",
    "TaxonNameWrapper #constructor should be able to parse binomial names into genus and specific epithet",
    "test"
  ],
  [
    "",
    "test-file/test/taxon-names.js.html#lineNumber40",
    "TaxonNameWrapper #constructor should be able to parse trinomial names into genus, specific epithet and infraspecific epithet",
    "test"
  ],
  [
    "",
    "test-file/test/taxon-names.js.html#lineNumber23",
    "TaxonNameWrapper #constructor should be able to parse uninomial names as such",
    "test"
  ],
  [
    "",
    "test-file/test/taxon-names.js.html#lineNumber57",
    "TaxonNameWrapper #constructor should be able to use default nomenclatural codes",
    "test"
  ],
  [
    "",
    "test-file/test/taxon-names.js.html#lineNumber49",
    "TaxonNameWrapper #constructor should ignore authority after a binomial name",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber175",
    "TaxonomicUnitMatcher",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber210",
    "TaxonomicUnitMatcher #matchByExternalReferences",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber211",
    "TaxonomicUnitMatcher #matchByExternalReferences should be able to match tunit3 and tunit4 by external references",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber203",
    "TaxonomicUnitMatcher #matchByNameComplete",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber204",
    "TaxonomicUnitMatcher #matchByNameComplete should be able to match tunit1 and tunit2 by complete name",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber217",
    "TaxonomicUnitMatcher #matchByOccurrenceID",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber218",
    "TaxonomicUnitMatcher #matchByOccurrenceID should be able to match tunit2 and tunit3 by specimen identifiers",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber224",
    "TaxonomicUnitMatcher #matched and #matchReason",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber225",
    "TaxonomicUnitMatcher #matched and #matchReason should match tunit1 and tunit2 on the basis of identical complete names",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber237",
    "TaxonomicUnitMatcher #matched and #matchReason should match tunit2 and tunit3 by identical specimen identifier",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber231",
    "TaxonomicUnitMatcher #matched and #matchReason should match tunit3 and tunit4 by identical external reference",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber20",
    "TaxonomicUnitWrapper",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber144",
    "TaxonomicUnitWrapper #asOWLEquivClass",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber160",
    "TaxonomicUnitWrapper #asOWLEquivClass when given a specimen, only the occurrence ID should be present in the equivClass",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber145",
    "TaxonomicUnitWrapper #asOWLEquivClass when given a taxon concept, only the complete name should be present in the equivClass",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber21",
    "TaxonomicUnitWrapper #constructor given no arguments",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber22",
    "TaxonomicUnitWrapper #constructor given no arguments should create an empty TaxonomicUnitWrapper without a defined label",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber107",
    "TaxonomicUnitWrapper #fromLabel",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber108",
    "TaxonomicUnitWrapper #fromLabel should return empty lists when inputs are empty or undefined",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber129",
    "TaxonomicUnitWrapper #fromLabel when given a scientific name separated with underscores, it should return a list of a single TU wrapping the scientific name",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber115",
    "TaxonomicUnitWrapper #fromLabel when given a scientific name, it should return a list of a single TU wrapping a scientific name",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber51",
    "TaxonomicUnitWrapper #label given a taxonomic unit",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber79",
    "TaxonomicUnitWrapper #label given a taxonomic unit should ignore occurrence ID if typed as a taxon concept",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber95",
    "TaxonomicUnitWrapper #label given a taxonomic unit should provide both taxon name and occurrence ID in label, but ignore external reference",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber87",
    "TaxonomicUnitWrapper #label given a taxonomic unit should return a wrapped external reference by surrounding it with \"<>\"",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber52",
    "TaxonomicUnitWrapper #label given a taxonomic unit should return a wrapped scientific name",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber62",
    "TaxonomicUnitWrapper #label given a taxonomic unit should return a wrapped specimen identifier preceded by \"Specimen\"",
    "test"
  ],
  [
    "",
    "test-file/test/taxonomic-units.js.html#lineNumber69",
    "TaxonomicUnitWrapper #label given a taxonomic unit should return specimens with an occurrenceID as well as a taxon concept",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber28",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably.",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber84",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably. Test all example Phyx files",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber97",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably. Test all example Phyx files ",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber98",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably. Test all example Phyx files  should validate against our JSON schema",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber30",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably. convert brochu_2003.json to an OWL ontology",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber41",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably. convert brochu_2003.json to an OWL ontology should be able to convert brochu_2003.json to an OWL Ontology",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber36",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably. convert brochu_2003.json to an OWL ontology should be able to load brochu_2003.json",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber53",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably. convert brochu_2003.json to an OWL ontology should generate the same OWL ontology as it generated earlier",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber58",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably. convert brochu_2003.jsonld to n-quads",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber62",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably. convert brochu_2003.jsonld to n-quads should be able to convert brochu_2003.json via JSON-LD to n-quads",
    "test"
  ],
  [
    "",
    "test-file/test/examples.js.html#lineNumber78",
    "Test whether conversion of Phyx files to an OWL ontology occurs predictably. convert brochu_2003.jsonld to n-quads should generate the same n-quads ontology as it generated earlier",
    "test"
  ],
  [
    "",
    "test-file/test/jphyloref.js.html#lineNumber31",
    "Test whether the expected JSON-LD files pass testing using JPhyloRef.",
    "test"
  ],
  [
    "",
    "test-file/test/jphyloref.js.html#lineNumber32",
    "Test whether the expected JSON-LD files pass testing using JPhyloRef. download JPhyloRef",
    "test"
  ],
  [
    "",
    "test-file/test/jphyloref.js.html#lineNumber38",
    "Test whether the expected JSON-LD files pass testing using JPhyloRef. download JPhyloRef has already been downloaded",
    "test"
  ],
  [
    "",
    "test-file/test/jphyloref.js.html#lineNumber42",
    "Test whether the expected JSON-LD files pass testing using JPhyloRef. download JPhyloRef should be downloadable",
    "test"
  ],
  [
    "",
    "test-file/test/jphyloref.js.html#lineNumber54",
    "Test whether the expected JSON-LD files pass testing using JPhyloRef. test example JSON-LD files using JPhyloRef",
    "test"
  ],
  [
    "",
    "test-file/test/jphyloref.js.html#lineNumber58",
    "Test whether the expected JSON-LD files pass testing using JPhyloRef. test example JSON-LD files using JPhyloRef ",
    "test"
  ],
  [
    "",
    "test-file/test/scripts/resolve.js.html#lineNumber20",
    "bin/resolve.js",
    "test"
  ],
  [
    "",
    "test-file/test/scripts/resolve.js.html#lineNumber80",
    "bin/resolve.js should correctly report errors with certain phyloreferences",
    "test"
  ],
  [
    "",
    "test-file/test/scripts/resolve.js.html#lineNumber39",
    "bin/resolve.js should provide the expected results on the `brochu_2003.json` example file",
    "test"
  ],
  [
    "",
    "test-file/test/scripts/resolve.js.html#lineNumber30",
    "bin/resolve.js should support `--help`",
    "test"
  ],
  [
    "",
    "test-file/test/scripts/resolve.js.html#lineNumber21",
    "bin/resolve.js should work without any arguments",
    "test"
  ],
  [
    "src/.external-ecmascript.js~array",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "src/.external-ecmascript.js~Array",
    "external"
  ],
  [
    "src/.external-ecmascript.js~arraybuffer",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "src/.external-ecmascript.js~ArrayBuffer",
    "external"
  ],
  [
    "src/.external-ecmascript.js~boolean",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "src/.external-ecmascript.js~Boolean",
    "external"
  ],
  [
    "src/.external-ecmascript.js~dataview",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "src/.external-ecmascript.js~DataView",
    "external"
  ],
  [
    "src/.external-ecmascript.js~date",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "src/.external-ecmascript.js~Date",
    "external"
  ],
  [
    "src/.external-ecmascript.js~error",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "src/.external-ecmascript.js~Error",
    "external"
  ],
  [
    "src/.external-ecmascript.js~evalerror",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "src/.external-ecmascript.js~EvalError",
    "external"
  ],
  [
    "src/.external-ecmascript.js~float32array",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "src/.external-ecmascript.js~Float32Array",
    "external"
  ],
  [
    "src/.external-ecmascript.js~float64array",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "src/.external-ecmascript.js~Float64Array",
    "external"
  ],
  [
    "src/.external-ecmascript.js~function",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "src/.external-ecmascript.js~Function",
    "external"
  ],
  [
    "src/.external-ecmascript.js~generator",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "src/.external-ecmascript.js~Generator",
    "external"
  ],
  [
    "src/.external-ecmascript.js~generatorfunction",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "src/.external-ecmascript.js~GeneratorFunction",
    "external"
  ],
  [
    "src/.external-ecmascript.js~infinity",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "src/.external-ecmascript.js~Infinity",
    "external"
  ],
  [
    "src/.external-ecmascript.js~int16array",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "src/.external-ecmascript.js~Int16Array",
    "external"
  ],
  [
    "src/.external-ecmascript.js~int32array",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "src/.external-ecmascript.js~Int32Array",
    "external"
  ],
  [
    "src/.external-ecmascript.js~int8array",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "src/.external-ecmascript.js~Int8Array",
    "external"
  ],
  [
    "src/.external-ecmascript.js~internalerror",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "src/.external-ecmascript.js~InternalError",
    "external"
  ],
  [
    "src/.external-ecmascript.js~json",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "src/.external-ecmascript.js~JSON",
    "external"
  ],
  [
    "src/.external-ecmascript.js~map",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "src/.external-ecmascript.js~Map",
    "external"
  ],
  [
    "src/.external-ecmascript.js~nan",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "src/.external-ecmascript.js~NaN",
    "external"
  ],
  [
    "src/.external-ecmascript.js~number",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "src/.external-ecmascript.js~Number",
    "external"
  ],
  [
    "src/.external-ecmascript.js~object",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "src/.external-ecmascript.js~Object",
    "external"
  ],
  [
    "src/.external-ecmascript.js~promise",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "src/.external-ecmascript.js~Promise",
    "external"
  ],
  [
    "src/.external-ecmascript.js~proxy",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "src/.external-ecmascript.js~Proxy",
    "external"
  ],
  [
    "src/.external-ecmascript.js~rangeerror",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "src/.external-ecmascript.js~RangeError",
    "external"
  ],
  [
    "src/.external-ecmascript.js~referenceerror",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "src/.external-ecmascript.js~ReferenceError",
    "external"
  ],
  [
    "src/.external-ecmascript.js~reflect",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "src/.external-ecmascript.js~Reflect",
    "external"
  ],
  [
    "src/.external-ecmascript.js~regexp",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "src/.external-ecmascript.js~RegExp",
    "external"
  ],
  [
    "src/.external-ecmascript.js~set",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "src/.external-ecmascript.js~Set",
    "external"
  ],
  [
    "src/.external-ecmascript.js~string",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "src/.external-ecmascript.js~String",
    "external"
  ],
  [
    "src/.external-ecmascript.js~symbol",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "src/.external-ecmascript.js~Symbol",
    "external"
  ],
  [
    "src/.external-ecmascript.js~syntaxerror",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "src/.external-ecmascript.js~SyntaxError",
    "external"
  ],
  [
    "src/.external-ecmascript.js~typeerror",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "src/.external-ecmascript.js~TypeError",
    "external"
  ],
  [
    "src/.external-ecmascript.js~urierror",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "src/.external-ecmascript.js~URIError",
    "external"
  ],
  [
    "src/.external-ecmascript.js~uint16array",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "src/.external-ecmascript.js~Uint16Array",
    "external"
  ],
  [
    "src/.external-ecmascript.js~uint32array",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "src/.external-ecmascript.js~Uint32Array",
    "external"
  ],
  [
    "src/.external-ecmascript.js~uint8array",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "src/.external-ecmascript.js~Uint8Array",
    "external"
  ],
  [
    "src/.external-ecmascript.js~uint8clampedarray",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "src/.external-ecmascript.js~Uint8ClampedArray",
    "external"
  ],
  [
    "src/.external-ecmascript.js~weakmap",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "src/.external-ecmascript.js~WeakMap",
    "external"
  ],
  [
    "src/.external-ecmascript.js~weakset",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "src/.external-ecmascript.js~WeakSet",
    "external"
  ],
  [
    "src/.external-ecmascript.js~boolean",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "src/.external-ecmascript.js~boolean",
    "external"
  ],
  [
    "src/.external-ecmascript.js~function",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "src/.external-ecmascript.js~function",
    "external"
  ],
  [
    "src/.external-ecmascript.js~null",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "src/.external-ecmascript.js~null",
    "external"
  ],
  [
    "src/.external-ecmascript.js~number",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "src/.external-ecmascript.js~number",
    "external"
  ],
  [
    "src/.external-ecmascript.js~object",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "src/.external-ecmascript.js~object",
    "external"
  ],
  [
    "src/.external-ecmascript.js~string",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "src/.external-ecmascript.js~string",
    "external"
  ],
  [
    "src/.external-ecmascript.js~undefined",
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "src/.external-ecmascript.js~undefined",
    "external"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js",
    "file/src/matchers/TaxonomicUnitMatcher.js.html",
    "src/matchers/TaxonomicUnitMatcher.js",
    "file"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher#asjsonld",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html#instance-method-asJSONLD",
    "src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher#asJSONLD",
    "method"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher#constructor",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html#instance-constructor-constructor",
    "src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher#constructor",
    "method"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher#match",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html#instance-method-match",
    "src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher#match",
    "method"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher#matchbyexternalreferences",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html#instance-method-matchByExternalReferences",
    "src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher#matchByExternalReferences",
    "method"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher#matchbynamecomplete",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html#instance-method-matchByNameComplete",
    "src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher#matchByNameComplete",
    "method"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher#matchbyoccurrenceid",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html#instance-method-matchByOccurrenceID",
    "src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher#matchByOccurrenceID",
    "method"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher#matchreason",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html#instance-member-matchReason",
    "src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher#matchReason",
    "member"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher#matched",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html#instance-member-matched",
    "src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher#matched",
    "member"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher#tunit1",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html#instance-member-tunit1",
    "src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher#tunit1",
    "member"
  ],
  [
    "src/matchers/taxonomicunitmatcher.js~taxonomicunitmatcher#tunit2",
    "class/src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher.html#instance-member-tunit2",
    "src/matchers/TaxonomicUnitMatcher.js~TaxonomicUnitMatcher#tunit2",
    "member"
  ],
  [
    "src/wrappers/citationwrapper.js",
    "file/src/wrappers/CitationWrapper.js.html",
    "src/wrappers/CitationWrapper.js",
    "file"
  ],
  [
    "src/wrappers/citationwrapper.js~citationwrapper#citation",
    "class/src/wrappers/CitationWrapper.js~CitationWrapper.html#instance-member-citation",
    "src/wrappers/CitationWrapper.js~CitationWrapper#citation",
    "member"
  ],
  [
    "src/wrappers/citationwrapper.js~citationwrapper#constructor",
    "class/src/wrappers/CitationWrapper.js~CitationWrapper.html#instance-constructor-constructor",
    "src/wrappers/CitationWrapper.js~CitationWrapper#constructor",
    "method"
  ],
  [
    "src/wrappers/citationwrapper.js~citationwrapper#tostring",
    "class/src/wrappers/CitationWrapper.js~CitationWrapper.html#instance-method-toString",
    "src/wrappers/CitationWrapper.js~CitationWrapper#toString",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js",
    "file/src/wrappers/PhylogenyWrapper.js.html",
    "src/wrappers/PhylogenyWrapper.js",
    "file"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper#asjsonld",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#instance-method-asJSONLD",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper#asJSONLD",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper#constructor",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#instance-constructor-constructor",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper#constructor",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper#defaultnomencode",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#instance-member-defaultNomenCode",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper#defaultNomenCode",
    "member"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper#getnodelabels",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#instance-method-getNodeLabels",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper#getNodeLabels",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper#getnodelabelsmatchedbyspecifier",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#instance-method-getNodeLabelsMatchedBySpecifier",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper#getNodeLabelsMatchedBySpecifier",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper#getnodesasjsonld",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#instance-method-getNodesAsJSONLD",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper#getNodesAsJSONLD",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper#getparsednewickwithiris",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#instance-method-getParsedNewickWithIRIs",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper#getParsedNewickWithIRIs",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper#gettaxonomicunits",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#instance-method-getTaxonomicUnits",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper#getTaxonomicUnits",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper#gettaxonomicunitsfornodelabel",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#instance-method-getTaxonomicUnitsForNodeLabel",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper#getTaxonomicUnitsForNodeLabel",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper#phylogeny",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#instance-member-phylogeny",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper#phylogeny",
    "member"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper.geterrorsinnewickstring",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#static-method-getErrorsInNewickString",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.getErrorsInNewickString",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper.getparsednewick",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#static-method-getParsedNewick",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.getParsedNewick",
    "method"
  ],
  [
    "src/wrappers/phylogenywrapper.js~phylogenywrapper.recursenodes",
    "class/src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.html#static-method-recurseNodes",
    "src/wrappers/PhylogenyWrapper.js~PhylogenyWrapper.recurseNodes",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js",
    "file/src/wrappers/PhylorefWrapper.js.html",
    "src/wrappers/PhylorefWrapper.js",
    "file"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#asjsonld",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-method-asJSONLD",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#asJSONLD",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#constructor",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-constructor-constructor",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#constructor",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#defaultnomencode",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-get-defaultNomenCode",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#defaultNomenCode",
    "member"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#deletespecifier",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-method-deleteSpecifier",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#deleteSpecifier",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#externalspecifiers",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-get-externalSpecifiers",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#externalSpecifiers",
    "member"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#getcurrentstatus",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-method-getCurrentStatus",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#getCurrentStatus",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#getexpectednodelabels",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-method-getExpectedNodeLabels",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#getExpectedNodeLabels",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#getspecifiertype",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-method-getSpecifierType",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#getSpecifierType",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#getstatuschanges",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-method-getStatusChanges",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#getStatusChanges",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#internalspecifiers",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-get-internalSpecifiers",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#internalSpecifiers",
    "member"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#label",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-get-label",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#label",
    "member"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#label",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-set-label",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#label",
    "member"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#phyloref",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-member-phyloref",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#phyloref",
    "member"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#phyxdefaultnomencode",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-member-phyxDefaultNomenCode",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#phyxDefaultNomenCode",
    "member"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#setspecifiertype",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-method-setSpecifierType",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#setSpecifierType",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#setstatus",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-method-setStatus",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#setStatus",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#specifiers",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-get-specifiers",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#specifiers",
    "member"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper#uniqnomencodes",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#instance-get-uniqNomenCodes",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper#uniqNomenCodes",
    "member"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper.createclassexpressionsforexternals",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#static-method-createClassExpressionsForExternals",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper.createClassExpressionsForExternals",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper.createclassexpressionsforinternals",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#static-method-createClassExpressionsForInternals",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper.createClassExpressionsForInternals",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper.createcomponentclass",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#static-method-createComponentClass",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper.createComponentClass",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper.getclassexpressionsforexprandtu",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#static-method-getClassExpressionsForExprAndTU",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper.getClassExpressionsForExprAndTU",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper.getincludesrestrictionfortu",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#static-method-getIncludesRestrictionForTU",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper.getIncludesRestrictionForTU",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper.getmrcarestrictionoftwotus",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#static-method-getMRCARestrictionOfTwoTUs",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper.getMRCARestrictionOfTwoTUs",
    "method"
  ],
  [
    "src/wrappers/phylorefwrapper.js~phylorefwrapper.getstatuscuriesinenglish",
    "class/src/wrappers/PhylorefWrapper.js~PhylorefWrapper.html#static-method-getStatusCURIEsInEnglish",
    "src/wrappers/PhylorefWrapper.js~PhylorefWrapper.getStatusCURIEsInEnglish",
    "method"
  ],
  [
    "src/wrappers/phyxwrapper.js",
    "file/src/wrappers/PhyxWrapper.js.html",
    "src/wrappers/PhyxWrapper.js",
    "file"
  ],
  [
    "src/wrappers/phyxwrapper.js~phyxwrapper#asowlontology",
    "class/src/wrappers/PhyxWrapper.js~PhyxWrapper.html#instance-method-asOWLOntology",
    "src/wrappers/PhyxWrapper.js~PhyxWrapper#asOWLOntology",
    "method"
  ],
  [
    "src/wrappers/phyxwrapper.js~phyxwrapper#constructor",
    "class/src/wrappers/PhyxWrapper.js~PhyxWrapper.html#instance-constructor-constructor",
    "src/wrappers/PhyxWrapper.js~PhyxWrapper#constructor",
    "method"
  ],
  [
    "src/wrappers/phyxwrapper.js~phyxwrapper#newickparser",
    "class/src/wrappers/PhyxWrapper.js~PhyxWrapper.html#instance-member-newickParser",
    "src/wrappers/PhyxWrapper.js~PhyxWrapper#newickParser",
    "member"
  ],
  [
    "src/wrappers/phyxwrapper.js~phyxwrapper#phyx",
    "class/src/wrappers/PhyxWrapper.js~PhyxWrapper.html#instance-member-phyx",
    "src/wrappers/PhyxWrapper.js~PhyxWrapper#phyx",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js",
    "file/src/wrappers/SpecimenWrapper.js.html",
    "src/wrappers/SpecimenWrapper.js",
    "file"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#asowlequivclass",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-get-asOWLEquivClass",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#asOWLEquivClass",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#basisofrecord",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-get-basisOfRecord",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#basisOfRecord",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#basisofrecord",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-set-basisOfRecord",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#basisOfRecord",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#catalognumber",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-get-catalogNumber",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#catalogNumber",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#collectioncode",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-get-collectionCode",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#collectionCode",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#constructor",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-constructor-constructor",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#constructor",
    "method"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#institutioncode",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-get-institutionCode",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#institutionCode",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#label",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-get-label",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#label",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#occurrenceid",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-get-occurrenceID",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#occurrenceID",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#specimen",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-member-specimen",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#specimen",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper#taxonconcept",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#instance-get-taxonConcept",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper#taxonConcept",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper.type_specimen",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#static-get-TYPE_SPECIMEN",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper.TYPE_SPECIMEN",
    "member"
  ],
  [
    "src/wrappers/specimenwrapper.js~specimenwrapper.fromoccurrenceid",
    "class/src/wrappers/SpecimenWrapper.js~SpecimenWrapper.html#static-method-fromOccurrenceID",
    "src/wrappers/SpecimenWrapper.js~SpecimenWrapper.fromOccurrenceID",
    "method"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js",
    "file/src/wrappers/TaxonConceptWrapper.js.html",
    "src/wrappers/TaxonConceptWrapper.js",
    "file"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#accordingto",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-get-accordingTo",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#accordingTo",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#accordingtostring",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-get-accordingToString",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#accordingToString",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#asowlequivclass",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-get-asOWLEquivClass",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#asOWLEquivClass",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#constructor",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-constructor-constructor",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#constructor",
    "method"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#defaultnomencode",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-member-defaultNomenCode",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#defaultNomenCode",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#label",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-get-label",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#label",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#namecomplete",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-get-nameComplete",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#nameComplete",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#nomencode",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-get-nomenCode",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#nomenCode",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#nomencodedetails",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-get-nomenCodeDetails",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#nomenCodeDetails",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#taxonname",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-get-taxonName",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#taxonName",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper#tunit",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#instance-member-tunit",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper#tunit",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper.type_taxon_concept",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#static-get-TYPE_TAXON_CONCEPT",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.TYPE_TAXON_CONCEPT",
    "member"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper.fromlabel",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#static-method-fromLabel",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.fromLabel",
    "method"
  ],
  [
    "src/wrappers/taxonconceptwrapper.js~taxonconceptwrapper.wraptaxonname",
    "class/src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.html#static-method-wrapTaxonName",
    "src/wrappers/TaxonConceptWrapper.js~TaxonConceptWrapper.wrapTaxonName",
    "method"
  ],
  [
    "src/wrappers/taxonnamewrapper.js",
    "file/src/wrappers/TaxonNameWrapper.js.html",
    "src/wrappers/TaxonNameWrapper.js",
    "file"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#asjsonld",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-asJSONLD",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#asJSONLD",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#asowlequivclass",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-asOWLEquivClass",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#asOWLEquivClass",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#binomialname",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-binomialName",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#binomialName",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#binomialname",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-set-binomialName",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#binomialName",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#constructor",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-constructor-constructor",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#constructor",
    "method"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#defaultnomencode",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-member-defaultNomenCode",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#defaultNomenCode",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#genuspart",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-genusPart",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#genusPart",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#genuspart",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-set-genusPart",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#genusPart",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#infraspecificepithet",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-infraspecificEpithet",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#infraspecificEpithet",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#infraspecificepithet",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-set-infraspecificEpithet",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#infraspecificEpithet",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#label",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-label",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#label",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#label",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-set-label",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#label",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#namecomplete",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-nameComplete",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#nameComplete",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#namecomplete",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-set-nameComplete",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#nameComplete",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#nomenclaturalcode",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-nomenclaturalCode",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#nomenclaturalCode",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#nomenclaturalcode",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-set-nomenclaturalCode",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#nomenclaturalCode",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#nomenclaturalcodedetails",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-nomenclaturalCodeDetails",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#nomenclaturalCodeDetails",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#specificepithet",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-specificEpithet",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#specificEpithet",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#specificepithet",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-set-specificEpithet",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#specificEpithet",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#trinomialname",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-trinomialName",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#trinomialName",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#trinomialname",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-set-trinomialName",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#trinomialName",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#txname",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-member-txname",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#txname",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#uninomial",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-uninomial",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#uninomial",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#uninomial",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-set-uninomial",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#uninomial",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper#verbatimname",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#instance-get-verbatimName",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper#verbatimName",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper.icncp_code",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#static-get-ICNCP_CODE",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.ICNCP_CODE",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper.icnp_code",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#static-get-ICNP_CODE",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.ICNP_CODE",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper.icn_code",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#static-get-ICN_CODE",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.ICN_CODE",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper.ictv_code",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#static-get-ICTV_CODE",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.ICTV_CODE",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper.iczn_code",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#static-get-ICZN_CODE",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.ICZN_CODE",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper.type_taxon_name",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#static-get-TYPE_TAXON_NAME",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.TYPE_TAXON_NAME",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper.unknown_code",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#static-get-UNKNOWN_CODE",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.UNKNOWN_CODE",
    "member"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper.fromverbatimname",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#static-method-fromVerbatimName",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.fromVerbatimName",
    "method"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper.getnomencodedetails",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#static-method-getNomenCodeDetails",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.getNomenCodeDetails",
    "method"
  ],
  [
    "src/wrappers/taxonnamewrapper.js~taxonnamewrapper.getnomenclaturalcodes",
    "class/src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.html#static-method-getNomenclaturalCodes",
    "src/wrappers/TaxonNameWrapper.js~TaxonNameWrapper.getNomenclaturalCodes",
    "method"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js",
    "file/src/wrappers/TaxonomicUnitWrapper.js.html",
    "src/wrappers/TaxonomicUnitWrapper.js",
    "file"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#asjson",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-get-asJSON",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#asJSON",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#asjsonld",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-get-asJSONLD",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#asJSONLD",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#asowlequivclass",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-get-asOWLEquivClass",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#asOWLEquivClass",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#constructor",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-constructor-constructor",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#constructor",
    "method"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#defaultnomencode",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-member-defaultNomenCode",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#defaultNomenCode",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#externalreferences",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-get-externalReferences",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#externalReferences",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#label",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-get-label",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#label",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#specimen",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-get-specimen",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#specimen",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#taxonconcept",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-get-taxonConcept",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#taxonConcept",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#tunit",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-member-tunit",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#tunit",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper#types",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#instance-get-types",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper#types",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper.type_specimen",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#static-get-TYPE_SPECIMEN",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.TYPE_SPECIMEN",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper.type_taxon_concept",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#static-get-TYPE_TAXON_CONCEPT",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.TYPE_TAXON_CONCEPT",
    "member"
  ],
  [
    "src/wrappers/taxonomicunitwrapper.js~taxonomicunitwrapper.fromlabel",
    "class/src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.html#static-method-fromLabel",
    "src/wrappers/TaxonomicUnitWrapper.js~TaxonomicUnitWrapper.fromLabel",
    "method"
  ],
  [
    "test/citations.js",
    "test-file/test/citations.js.html",
    "test/citations.js",
    "testFile"
  ],
  [
    "test/examples.js",
    "test-file/test/examples.js.html",
    "test/examples.js",
    "testFile"
  ],
  [
    "test/jphyloref.js",
    "test-file/test/jphyloref.js.html",
    "test/jphyloref.js",
    "testFile"
  ],
  [
    "test/phylogenies.js",
    "test-file/test/phylogenies.js.html",
    "test/phylogenies.js",
    "testFile"
  ],
  [
    "test/phylorefs.js",
    "test-file/test/phylorefs.js.html",
    "test/phylorefs.js",
    "testFile"
  ],
  [
    "test/scripts/phyx2owl.js",
    "test-file/test/scripts/phyx2owl.js.html",
    "test/scripts/phyx2owl.js",
    "testFile"
  ],
  [
    "test/scripts/resolve.js",
    "test-file/test/scripts/resolve.js.html",
    "test/scripts/resolve.js",
    "testFile"
  ],
  [
    "test/specimens.js",
    "test-file/test/specimens.js.html",
    "test/specimens.js",
    "testFile"
  ],
  [
    "test/taxon-names.js",
    "test-file/test/taxon-names.js.html",
    "test/taxon-names.js",
    "testFile"
  ],
  [
    "test/taxonomic-units.js",
    "test-file/test/taxonomic-units.js.html",
    "test/taxonomic-units.js",
    "testFile"
  ]
]